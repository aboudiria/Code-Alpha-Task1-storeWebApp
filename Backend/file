✅ TASK 1: Simple E-commerce Store
Build a basic e-commerce site with product listings.
Frontend: HTML, CSS, JavaScript.
Backend: Use Django (Python) or Express.js (Node.js).
Add features like:
● Shopping cart
● Product details page
● Order processing
www.codealpha.tech
● User registration/login
Database for storing products, users, and orders.CREATE TABLE Users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(150) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  role ENUM('admin', 'user') DEFAULT 'user',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);CREATE TABLE shipping_info (
    id SERIAL PRIMARY KEY,
    order_id INT REFERENCES orders(id),
    full_name VARCHAR(100),
    address TEXT,
    city VARCHAR(100),
    postal_code VARCHAR(20),
    country VARCHAR(100),
    phone VARCHAR(20)
);CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    stock INT DEFAULT 0,
    image_url TEXT,
    category VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(id),
    total_amount DECIMAL(10, 2),
    status VARCHAR(50) DEFAULT 'pending', -- pending, shipped, delivered, cancelled
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);CREATE TABLE order_items (
    id SERIAL PRIMARY KEY,
    order_id INT REFERENCES orders(id) ON DELETE CASCADE,
    product_id INT REFERENCES products(id),
    quantity INT,
    price DECIMAL(10, 2) -- snapshot price at time of order
);const db= require('../config/connect_DB');
const bcrypt = require('bcrypt');


// ✅ Get all users
const getAllUsers = async () => {
  try {
    const [rows] = await db.query('SELECT * FROM users');
    return rows;
  } catch (error) {
    console.error('Error fetching users:', error);
    throw error;
  }
};

//  Create a new user
const createUser = async (userData) => {
  try {
    const { name, email, password } = userData;
    const hashedPassword = await bcrypt.hash(password, 10);
    const [result] = await db.query(
      'INSERT INTO users (name, email, password) VALUES (?, ?, ?)',
      [name, email, hashedPassword]
    );
    return result.insertId;
  } catch (error) {
    console.error('Error creating user:', error);
    throw error;
  }
};

//  Login user & check role
const loginUser = async (email, password) => {
  try {
    const [rows] = await db.query('SELECT * FROM users WHERE email = ?', [email]);

    if (rows.length === 0) {
      throw new Error('User not found');
    }

    const user = rows[0];
    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      throw new Error('Invalid password');
    }
 
    if (user.role === 'admin') {
      console.log('Logged in as admin');
    } else if (user.role === 'user') {
      console.log('Logged in as user');
    }

    return user; // return user in all cases
  } catch (error) {
    console.error('Error logging in user:', error);
    throw error;
  }
};
// delete a user from db by admin
const deleteUserByAdmin = async (userId) => {
  try {
    const [result] = await db.query('DELETE FROM users WHERE id = ?', [userId]);
    return result.affectedRows > 0;
  } catch (error) {
    console.error('Error deleting user:', error);
    throw error;
  }
};


module.exports = {
  getAllUsers,
  createUser,
  loginUser,
  deleteUserByAdmin
};const db= require('../config/connect_DB');
// Get all products
const getAllProducts = async () => {
    try {
        const [rows] = await db.query('SELECT * FROM products');
        return rows;
    } catch (error) {
        console.error('Error fetching products:', error);
        throw error;
    }
};

const getProductByName = async (name) => {
    try {
        const [rows] = await db.query('SELECT * FROM products WHERE name LIKE ?', [%${name}%]);
        return rows;
    } catch (error) {
        console.error('Error fetching products by name:', error);
        throw error;
    }
};

//getProductsByCategory
const getProductsByCategory=async(category)=>{
    try {
        const [rows]= await db.query('SELECT * FROM products WHERE category LIKE ?', [%${category}%]);
        return rows;
        
    } catch (error) {
        console.log(error("error fetching products by category:",error));
        
    }
}

// create a product
const createProduct = async (productData) => {
    const { name, description, price, stock, image_url, category } = productData;
    const [result] = await db.query(
        INSERT INTO products (name, description, price, stock, image_url, category) 
         VALUES (?, ?, ?, ?, ?, ?),
        [name, description, price, stock, image_url, category]
    );
    return { id: result.insertId, ...productData };
};
const deleteProduct = async (id) => {
    try {
        const [result] = await db.query('DELETE FROM products WHERE id = ?', [id]);
        return result;
    } catch (error) {
        console.error("Error deleting product:", error);
        throw error;
    }
};
const updateProduct = async (id, updateFields) => {
    try {
        const keys = Object.keys(updateFields);
        const values = Object.values(updateFields);

        if (keys.length === 0) {
            throw new Error("No fields provided for update.");
        }

        const setClause = keys.map(key => ${key} = ?).join(', ');
        const sql = UPDATE products SET ${setClause} WHERE id = ?;

        values.push(id); // Add product ID for WHERE clause

        const [result] = await db.query(sql, values);
        return result;
    } catch (error) {
        console.error("Error updating product:", error);
        throw error;
    }
};

const deleteAllProducts = async (req, res) => {
    try {
        const result = await products.deleteAllProducts();

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: "No products to delete" });
        }

        res.status(200).json({ message: "All products deleted successfully" });
    } catch (error) {
        console.error("Error deleting all products:", error);
        res.status(500).json({ error: "Error deleting all products" });
    }
};



module.exports = {
    getAllProducts,
    getProductByName,
    getProductsByCategory,
    createProduct,
    deleteProduct,
    updateProduct,
    deleteAllProducts
};const db = require('../config/connect_DB');

// Create an order
const createOrder = async (orderData) => {
  const { user_id, total_amount, status } = orderData;
  const sql = 'INSERT INTO orders (user_id, total_amount, status) VALUES (?, ?, ?)';
  const [result] = await db.query(sql, [user_id, total_amount, status]);
  return { id: result.insertId, ...orderData };
};

// Get order by ID
const getOrderById = async (id) => {
  const sql = 'SELECT * FROM orders WHERE id = ?';
  const [rows] = await db.query(sql, [id]);
  return rows;
};

// Get orders by user ID
const getOrderByUser = async (userId) => {
  const sql = 'SELECT * FROM orders WHERE user_id = ?';
  const [rows] = await db.query(sql, [userId]);
  return rows;
};

// Get all orders (admin only)
const getAllOrders = async () => {
   const sql = 
     SELECT 
       o.id AS order_id,
       o.user_id,
       u.name AS user_name,
       o.total_amount,
       o.status,
       o.created_at
     FROM orders o
     JOIN users u ON o.user_id = u.id
     ORDER BY o.created_at DESC
   ;
   const [rows] = await db.query(sql);
   return rows;
 };

 // Update order status
const updateOrderStatus = async (orderId, status) => {
   const sql = 'UPDATE orders SET status = ? WHERE id = ?';
   const [result] = await db.query(sql, [status, orderId]);
   return result;
 };
 

module.exports = {
  createOrder,
  getOrderById,
  getOrderByUser,
  getAllOrders
};const users= require('../models/userModel');
const bcrypt = require('bcrypt');
const validatePassword= require('../utils/validatePassword');
const validateEmail= require('../utils/validateEmail');
const generateTokenAndSetCookies = (require('../utils/generateTokenAndSetCookies'));

// Get all users
const getAllUsers = async (req, res) => {
    try {
        const usersList = await users.getAllUsers();
            res.status(200).json({ message: 'Users fetched successfully', users: usersList.map(user => ({
            id: user.id,
            name: user.name,
            email: user.email,
            role: user.role })) }); 
    } catch (error) { 
        res.status(500).json({ message: 'Error fetching users' });
    }
};
const createUser = async (req, res) => {
    try {
      const { name, email, password } = req.body;
  
      if (!name || !email || !password) {
        return res.status(400).json({ message: 'Name, email, and password are required' });
      }
  
      const existingUser = await users.getAllUsers();
      if (existingUser.some(user => user.email === email || user.name === name)) {
        return res.status(400).json({ message: 'User already exists' });
      }
  
      if (!validateEmail(email)) {
        return res.status(400).json({ message: 'Invalid email address' });
      }
  
      if (!validatePassword(password)) {
        return res.status(400).json({ message: 'Password must be at least 8 characters long and contain at least one number and one special character' });
      }
  
      const hashedPassword = await bcrypt.hash(password, 10);
  
      const userData = { name, email, password: hashedPassword };
      const userId = await users.createUser(userData);
  
      generateTokenAndSetCookies(res, { id: userId, name, email });
  
      res.status(201).json({ message: 'User created successfully', userId });
    } catch (error) {
      console.error('Error creating user:', error);
      res.status(500).json({ message: 'Error creating user' });
    }
  };
// Login user, check if login as admin or user
const loginUser = async (req, res) => {
    try {
      const { email, password } = req.body;
  
      if (!email || !password) {
        return res.status(400).json({ message: 'Email and password are required' });
      }
  
      const allUsers = await users.getAllUsers(); // assuming users is your DB access
      const foundUser = allUsers.find(u => u.email === email);
  
      if (!foundUser) {
        return res.status(404).json({ message: 'User not found' });
      }
  
      if (foundUser.role === 'admin') {
        generateTokenAndSetCookies(res, foundUser);
        return res.status(200).json({ message: 'Login successful', user: foundUser });
      }
  
      const isPasswordValid = await bcrypt.compare(password, foundUser.password);
    
  
      generateTokenAndSetCookies(res, foundUser);
      return res.status(200).json({ message: 'Login successful', user: foundUser.name, role: foundUser.role });
    } catch (error) {
      console.error('Login error:', error);
      res.status(500).json({ message: 'Error logging in user' });
    }
  };

//logout a user
const logoutUser = (req, res) => {
    res.clearCookie('token');
    res.status(200).json({ message: 'Logout successful' });
};

// Api for deleting a users fromDb by admin login in website 
const deleteUserByAdmin= async(req, res) => {
  try {
    //first check if the admin is trying to delete a user from db not a user
    const adminTryingToDeleteUser=req.user.role;
    if(adminTryingToDeleteUser !== 'admin') {
      return res.status(403).json({ message: 'Only admins can delete users' });
    }
    const userId = req.params.id; // Assuming the user ID is passed as a URL parameter
    if (!userId) {
      return res.status(400).json({ message: 'User ID is required' });
    }
    const allUsers = await users.getAllUsers();
    const userToDelete = allUsers.find(u => u.id === parseInt(userId));
    if (!userToDelete) {
      return res.status(404).json({ message: 'User not found' });
    }
    // Delete the user
    await users.deleteUserByAdmin(userId);
    res.status(200).json({ message: 'User deleted successfully' });

    
  } catch (error) {
    console.error('Error deleting user:', error);
    res.status(500).json({ message: 'Error deleting user' });
    
  }
}




module.exports = {
    getAllUsers,
    createUser,
    loginUser,
    logoutUser,
    deleteUserByAdmin
}const products = require('../models/productModel');

// Get all products
const getAllProducts = async (req, res) => {
    try {
        const productsList = await products.getAllProducts();
        if (productsList.length === 0) {
            return res.status(404).json({ message: "No products available in the store" });
        }
        res.status(200).json({
            message: 'All available products',
            products: productsList.map(p => ({
                id: p.id,
                name: p.name,
                description: p.description,
                stock: p.stock,
                category: p.category,
                price: p.price,
                image_url: p.image_url
            }))
        });
    } catch (error) {
        console.error("Error in getAllProducts:", error);
        res.status(500).json({ error: "Error getting the products" });
    }
};

// Get product by name
const getProductByName = async (req, res) => {
    try {
        const { productName } = req.body;
        if (!productName || productName.trim() === "") {
            return res.status(400).json({ message: "Product name is required" });
        }

        const productNameList = await products.getProductByName(productName);
        if (productNameList.length === 0) {
            return res.status(404).json({ message: "No products found with that name" });
        }

        res.status(200).json({
            message: "Successfully fetched products by name",
            products: productNameList.map(p => ({
                id: p.id,
                name: p.name,
                stock: p.stock,
                price: p.price,
                category: p.category,
                image_url: p.image_url
            }))
        });
    } catch (error) {
        console.error("Error in getProductByName:", error);
        res.status(500).json({ error: "Error getting the product by name" });
    }
};

// Get products by category
const getProductsByCategory = async (req, res) => {
    try {
        const { category } = req.body;
        if (!category || category.trim() === "") {
            return res.status(400).json({ message: "Category is required" });
        }

        const productsCategoryList = await products.getProductsByCategory(category);
        if (productsCategoryList.length === 0) {
            return res.status(404).json({ message: "No products found in this category" });
        }

        res.status(200).json({
            message: "Successfully fetched products by category",
            products: productsCategoryList.map(p => ({
                category: p.category,
                id: p.id,
                name: p.name,
                description: p.description,
                stock: p.stock,
                price: p.price,
                image_url: p.image_url
            }))
        });
    } catch (error) {
        console.error("Error in getProductsByCategory:", error);
        res.status(500).json({ error: "Error fetching products by category" });
    }
};

// Create product
const createProduct = async (req, res) => {
    try {
        const { name, description, price, stock, category, image_url } = req.body;

        if (!name || !description || !price || !stock || !category || !image_url) {
            return res.status(400).json({ message: "All fields are required to create a product" });
        }

        const productCreated = await products.createProduct({
            name,
            description,
            price,
            stock,
            category,
            image_url
        });

        res.status(201).json({
            message: "Product created successfully",
            product: productCreated
        });
    } catch (error) {
        console.error("Error in creating product:", error);
        res.status(500).json({ error: "Error in creating product" });
    }
};
const deleteProduct = async (req, res) => {
    try {
        const { id } = req.params;

        if (!id || isNaN(id)) {
            return res.status(400).json({ message: "Valid product ID is required" });
        }

        const result = await products.deleteProduct(id);

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: "Product not found" });
        }

        res.status(200).json({ message: "Product deleted successfully" });
    } catch (error) {
        console.error("Error deleting product:", error);
        res.status(500).json({ error: "Error deleting product" });
    }
};
const updateProduct = async (req, res) => {
    try {
        const { id } = req.params;
        const updateFields = req.body;

        if (!id || isNaN(id)) {
            return res.status(400).json({ message: "Valid product ID is required" });
        }

        if (Object.keys(updateFields).length === 0) {
            return res.status(400).json({ message: "At least one field must be provided for update" });
        }

        const result = await products.updateProduct(id, updateFields);

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: "Product not found or no changes made" });
        }

        res.status(200).json({ message: "Product updated successfully" });
    } catch (error) {
        console.error("Error updating product:", error);
        res.status(500).json({ error: "Failed to update product" });
    }
};
const deleteAllProducts = async (req, res) => {
    try {
        const result = await productModel.deleteAllProducts();

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: "No products to delete." });
        }

        return res.status(200).json({ 
            message: "All products deleted successfully.",
            deletedCount: result.affectedRows 
        });
    } catch (error) {
        console.error("Error deleting all products:", error);
        res.status(500).json({ error: "Failed to delete products." });
    }
};


module.exports = {
    getAllProducts,
    getProductByName,
    getProductsByCategory,
    createProduct, 
    deleteProduct, 
    updateProduct,
    deleteAllProducts
};const order = require('../models/orderModel');
const user = require('../models/userModel');

const createOrder = async (req, res) => {
  try {
    const { total_amount, status } = req.body;
    const userId = req.user.id; 

    const allUsers = await user.getAllUsers(); 
    
    const userTryingToCreateOrder = allUsers.some(
      (u) => u.id === parseInt(userId)
    );

    if (!userTryingToCreateOrder) {
      return res.status(400).json({ message: "User not found. Please log in." });
    }

    const currentUser = allUsers.find(u => u.id === parseInt(userId));
    if (currentUser.role === "admin") {
      return res.status(401).json({ message: "Admin is not authorized to create an order." });
    }

    const orderData = {
      user_id: userId,
      total_amount,
      status: status || 'pending',
    };

    const newOrder = await order.createOrder(orderData);

    res.status(200).json({ message: "Successfully created an order", order: newOrder });

  } catch (error) {
    console.error("Error in creating order:", error);
    res.status(500).json({ error: "Error in creating order" });
  }
};
// Get Order by ID (user or admin)
const getOrderById = async (req, res) => {
    try {
      const { id } = req.params;
      const userId = req.user.id;
      const role = req.user.role;
  
      const orders = await order.getOrderById(id);
      if (!orders.length) {
        return res.status(404).json({ message: "Order not found" });
      }
  
      const orderData = orders[0];
  
      // Only admin or the owner can access
      if (orderData.user_id !== userId && role !== 'admin') {
        return res.status(403).json({ message: "Access denied" });
      }
  
      res.status(200).json(orderData);
  
    } catch (error) {
      console.error("Error getting order by ID:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  };
  
  // Get Orders by Logged-in User
  const getOrdersByUser = async (req, res) => {
    try {
      const userId = req.user.id;
      const orders = await order.getOrderByUser(userId);
      res.status(200).json(orders);
    } catch (error) {
      console.error("Error getting user orders:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  };
 // Admin: Get All Orders
const getAllOrders = async (req, res) => {
    try {
      if (req.user.role !== 'admin') {
        return res.status(403).json({ message: "Only admin can view all orders" });
      }
  
      const orders = await order.getAllOrders();
      res.status(200).json(orders);
  
    } catch (error) {
      console.error("Error fetching all orders:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  };
  
  // Admin: Update Order Status
  const updateOrderStatus = async (req, res) => {
    try {
      if (req.user.role !== 'admin') {
        return res.status(403).json({ message: "Only admin can update order status" });
      }
  
      const { id } = req.params;
      const { status } = req.body;
  
      const updated = await order.updateOrderStatus(id, status);
      if (updated.affectedRows === 0) {
        return res.status(404).json({ message: "Order not found or status unchanged" });
      }
  
      res.status(200).json({ message: "Order status updated successfully" });
  
    } catch (error) {
      console.error("Error updating order status:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  };
module.exports = {
  createOrder,
  getOrderById,
  getOrdersByUser,
  getAllOrders,
  updateOrderStatus
  
};
 i give you all tables used in these ecommerce ,i do the user , products model and controllers. first check if i has any issues in this code. second complete coding and doing order,orderItem,cart_item,shipping_info. models and controllers. check ervery function if for admin or client  